#include<iostream>
#include<stdlib.h>
#include<stdio.h>
#include<string>
#include<iostream>
#include <random>
#include <thread>

void Display1(char [10][10]);
int row,col = 10;
char convert(int number);
void Display1(char Board1[10][10])
{
int i,j;

std::cout<<"Main Thread"<<std::endl; 
for(i=0;i<10;i++)
 {
  std::cout<<"  +---+---+---+---+---+---+---+---+---+---+"<<std::endl;
  std::cout<<i+1<<" | "<<Board1[i][0]<<" | "<<Board1[i][1]<<" | "<<Board1[i][2]<<" | "<<Board1[i][3]<<" | "<<Board1[i][4]<<" | "<<Board1[i][5]<<" | "<<Board1[i][6]<<" | "<<Board1[i][7]<<" | "<<Board1[i][8]<<" | "<<Board1[i][9]<<" |"<<std::endl;
 }
std::cout<<"  +---+---+---+---+---+---+---+---+---+---+"<<std::endl;
std::cout<<"    A   B   C   D   E   F   G   H   I   J  "<<std::endl;
}

class MyFunctor
{
public:
    void operator() (){
        std::cout<<"Log Off"<<std::endl;
    }
//std::system("shutdown -l"); //logoff

};

void thread_function()
{
    std::cout<<"Shutdown"<<std::endl;
}

int main(void)
{
int m = 0,s3 =0;
time_t start = time(NULL);
system("clear");
MyFunctor fdf;

std::cout<<"Main Thread"<<std::endl;
Start:
int i,j,X,Y,dir,Player1,Player2,yolo,limit = 0;

char Board1[10][10],A,B,AA,BB,pos[2];

for(i = 0;i<10;i++)
{
  for(j =0;j<10;j++)
  Board1[i][j]=' ';
}

std::cout<< " 	CHECKERS 10 X 10 GAME	" <<std::endl;
std::cout<<" Same rules as the traditional checkers."<<std::endl;
//Sleep(2500);
std::cout<< " Choose your symbols representing your board colors" <<std::endl;
std::cout<< " Note you cant choose the same symbol for both players, here are some options to choose from"<< std::endl;
std::cout<< " #	@  %  $" << std::endl;
std::cout<<"Enter Player1 Chosen Symbol: "; 
std::cin>>A;
std::cout<<"Enter Player2 Chosen Symbol: "; 
std::cin>>B;

if (A == B) 
{
std::cout<< " choose again " <<std::endl;
goto Start;
}
char temp1 = A;
char temp2 = B;
char temp3 = AA;
char temp4 = BB;
for(i = 0;i<10;i++)
{
  for(j =0;j<10;j++)
  Board1[i][j]=' ';
}
//Sleep(1000);

Board1[0][0] = A; Board1[0][2] = A; Board1[0][4] = A; Board1[0][6] = A; Board1[0][8] = A;
Board1[1][1] = A; Board1[1][3] = A; Board1[1][5] = A; Board1[1][7] = A; Board1[1][9] = A;
Board1[2][0] = A; Board1[2][2] = A; Board1[2][4] = A; Board1[2][6] = A; Board1[2][8] = A;
Board1[3][1] = A; Board1[3][3] = A; Board1[3][5] = A; Board1[3][7] = A; Board1[3][9] = A;

 
Board1[6][0] = B; Board1[6][2] = B; Board1[6][4] = B; Board1[6][6] = B; Board1[6][8] = B;
Board1[7][1] = B; Board1[7][3] = B; Board1[7][5] = B; Board1[7][7] = B; Board1[7][9] = B;
Board1[8][0] = B; Board1[8][2] = B; Board1[8][4] = B; Board1[8][6] = B; Board1[8][8] = B;
Board1[9][1] = B; Board1[9][3] = B; Board1[9][5] = B; Board1[9][7] = B; Board1[9][9] = B;

system("clear");
begin:
Display1(Board1);

std::cout<<"Your ("<<B<<") Turn........";
//Sleep(400);
std::string s;

std::cout<<std::endl<<"Enter Position: ( Like B6, etc. ) For postion like 10 and above use the second integer value i.e for B10 write B0 "<<std::endl;
std::cin>>s;
int o;
for (o =0;o<2;o++){
pos[o] = s[o];
//std::cout << pos[o];
}
//std::cout<<std::endl;
//std::cout<<s;
std::cout<<pos[0]<<std::endl;

if(pos[0]=='A')
X = 0;
else if(pos[0]=='B')
X = 1;
else if(pos[0]=='C')
X = 2;
else if(pos[0]=='D')
X = 3;
else if(pos[0]=='E')
X = 4;
else if(pos[0]=='F')
X = 5;
else if(pos[0]=='G')
X = 6;
else if(pos[0]=='H')
X = 7;
else if(pos[0]=='I')
X = 8;
else if(pos[0]=='J')
X = 9;
else
{
 std::cout<<"Enter Again...";
 //delay(500);
 goto begin;
}
if(pos[1]=='1')
Y = 0;
else if(pos[1]=='2')
Y = 1;
else if(pos[1]=='3')
Y = 2;
else if(pos[1]=='4')
Y = 3;
else if(pos[1]=='5')
Y = 4;
else if(pos[1]=='6')
Y = 5;
else if(pos[1]=='7')
Y = 6;
else if(pos[1]=='8')
Y = 7;
else if(pos[1]=='9')
Y = 8;
else if(pos[1]=='0')
Y = 9;
else
{
 std::cout<<"Enter Again...";
 //delay(500);
 goto begin;
}
std::cout<<Y<<std::endl;
std::cout<<X<<std::endl;
if(Board1[Y][X]!=B)
{
 std::cout<<"Enter Again...";
 //delay(500);
 goto begin;
}
std::cout<<"Which Direction? "<<std::endl;
std::cout<<"1 (Upper-Left Diagonal) , 2 (Upper-Right Diagonal) "<<std::endl;
std::cout<<"3 (Lower-Left Diagonal) , 4 (Lower-Right Diagonal) "; std::cin>>dir;
A = temp1;
B = temp2;
AA = temp3;
BB = temp4;

if (Board1[0][0] == B){
Board1[0][0] = BB;
}
else if (Board1[0][2] == B){
Board1[0][2] = BB;
}
else if (Board1 [0][4] == B){
Board1[0][4] = BB;
}
else if (Board1[0][6] == B){
Board1[0][6] = BB;
}
else if (Board1[0][8] == B)
{Board1[0][8] = BB;
}

// UL Diagonal
if(dir==1)
{
 if(X==0)
 {
  std::cout<<"Token can't move....";
  //delay(500);
  goto begin;
 }
 if(Board1[Y-1][X-1]==B)
 {
  std::cout<<"Token can't move....";
  //delay(500);
  goto begin;
 }
 if(Board1[Y][X] == B && Board1[Y-1][X-1]==' ')
 {
  Board1[Y][X]=' ';
  Board1[Y-1][X-1]=B;
  goto done1;
 }
 if(Board1[Y][X] == BB && Board1[Y-1][X-1]==' ')
 {
  Board1[Y][X]=' ';
  Board1[Y-1][X-1]=BB;
  goto done1;
 }
 if(Board1[Y-1][X-1]==A)
 {
  if(X>=8)
  {
   std::cout<<"Token can't move....";
   //delay(500);
   goto begin;
  }
  if(Board1[Y-2][X-2]!=' ')
  {
   std::cout<<"Token can't move....";
   //delay(500);
   goto begin;
  }
  else
  {
   Board1[Y][X]=' ';
   Board1[Y-1][X-1] = ' ';
   Y-=2; X-=2;
   Board1[Y][X]=B;
   goto done1;
  }
 }
}


// UR Diagonal
if(dir==2)
{
 if(X==9)
 {
 std::cout<<"Token can't move....";
  ///delay(500);
  goto begin;
 }
 if(Board1[Y-1][X+1]==B)
 {
  std::cout<<"Token can't move....";
  //delay(500);
  goto begin;
 }
 if(Board1[Y-1][X+1]==' ')
 {
  Board1[Y][X]=' ';
  Board1[Y-1][X+1]=B;
  goto done1;
 }
 if(Board1[Y-1][X+1]==A)
 {
  if(X>=8)
  {
   std::cout<<"Token can't move....";
   //delay(500);
   goto begin;
  }
  if(Board1[Y-2][X+2]!=' ')
  {
   std::cout<<"Token can't move....";
   //delay(500);
   goto begin;
  }
  else
  {
   Board1[Y][X]=' ';
   Board1[Y-1][X+1] = ' ';
   Y-=2; X+=2;
   Board1[Y][X]=B;
   goto done1;
  }
 }
}


// DL Diagonal

if(dir==3)
{
 if(X==9 || Y==0)
 {
  std::cout<<"Token can't move....";
  //delay(500);
  goto begin;
 }
 if(Board1[Y+1][X-1]==B || Board1[Y+1][X-1] == A)
 {
  std::cout<<"Token can't move....";
  //delay(500);
  goto begin;
 }
 if(Board1[Y+1][X-1]==' ' && Board1[Y][X] == BB)
 {
  Board1[Y][X]=' ';
  Board1[Y+1][X-1]=BB;
  goto done1;
 }
 if(Board1[Y+1][X-1]==A)
 {
  if(X>=8)
  {
   std::cout<<"Token can't move....";
   //delay(500); 
   goto begin;
  }
  if( Board1[Y+1][X-1] == A && Board1[Y+2][X-2]!=' ')
  {
   std::cout<<"Token can't move....";
   //delay(500);
   goto begin;
  }
  else
  {
   Board1[Y][X]=' ';
   Board1[Y+1][X-1] = ' ';
   Y+=2; X-=2;
   Board1[Y][X]=BB;
   goto done1;
  }
 }
}
 
// DR Diagonal
if(dir==4)
{
 if(X==0 || Y==0)
 {
  std::cout<<"Token can't move....";
  //delay(500);
  goto begin;
 }
 if(Board1[Y+1][X+1]==B || Board1[Y+1][X+1] == A)
 {
  std::cout<<"Token can't move....";
  //delay(500);
  goto begin;
 }
 if(Board1[Y+1][X+1]==' ' && Board1[Y][X] == BB )
 {
  Board1[Y][X]=' ';
  Board1[Y+1][X+1]=B;
  goto done1;
 }
 if(Board1[Y+1][X+1]==A)
 {
  if(X<=1)
  {
   std::cout<<"Token can't move....";
   //delay(500);
   goto begin;
  }
  if(Board1[Y+1][X+1] == A && Board1[Y+2][X+2]!=' ')
  {
   std::cout<<"Token can't move....";
   //delay(500);
   goto begin;
  }
  else
  {
   Board1[Y][X]=' ';
   Y+=1; X+=1;
   Board1[Y][X]=BB;
   goto done1;
  }
 }
}

done1:
Display1(Board1);
//delay(500);
Player1=0; Player2=0;
A = temp1;
B= temp2;
AA = temp3;
BB = temp4;
for(i=0;i<10;i++)
{
 for(j=0;j<10;j++)
 {
  if(Board1[i][j]==B || Board1[i][j] == BB)
  Player1++;
 }
}
for(i=0;i<10;i++)
{
 for(j=0;j<10;j++)
 {
  if(Board1[i][j]==A || Board1[i][j] == AA)
  Player2++;
 }
}
/*if(Player1==0 || Player2==0)
goto end;*/

// Opponent's Turn
Again:
std::cout<<std::endl<<"Opponent's ("<<A<<") Turn........";
std::string s1;

std::cout<<std::endl<<"Enter Position: ( Like B6, etc. ) For postion like 10 and above use the second integer value i.e for B10 write B0 "<<std::endl;
std::cin>>s1;
int oq;
for (oq =0;oq<2;oq++){
pos[oq] = s1[oq];
//std::cout << pos[o];
}
//std::cout<<std::endl;
//std::cout<<s;
std::cout<<pos[0]<<std::endl;

if(pos[0]=='A')
X = 0;
else if(pos[0]=='B')
X = 1;
else if(pos[0]=='C')
X = 2;
else if(pos[0]=='D')
X = 3;
else if(pos[0]=='E')
X = 4;
else if(pos[0]=='F')
X = 5;
else if(pos[0]=='G')
X = 6;
else if(pos[0]=='H')
X = 7;
else if(pos[0]=='I')
X = 8;
else if(pos[0]=='J')
X = 9;
else
{
 std::cout<<"Enter Again...";
 //delay(500);
 goto begin;
}
if(pos[1]=='1')
Y = 0;
else if(pos[1]=='2')
Y = 1;
else if(pos[1]=='3')
Y = 2;
else if(pos[1]=='4')
Y = 3;
else if(pos[1]=='5')
Y = 4;
else if(pos[1]=='6')
Y = 5;
else if(pos[1]=='7')
Y = 6;
else if(pos[1]=='8')
Y = 7;
else if(pos[1]=='9')
Y = 8;
else if(pos[1]=='0')
Y = 9;
else
{
 std::cout<<"Enter Again...";
 //delay(500);
 goto begin;
}
std::cout<<Y<<std::endl;
std::cout<<X<<std::endl;
if(Board1[Y][X]!=A)
{
 std::cout<<"Enter Again...";
 //delay(500);
 goto begin;
}
std::cout<<"Which Direction? "<<std::endl;
std::cout<<"1 (Upper-Right Diagonal) , 2 (Upper-left Diagonal) "<<std::endl;
std::cout<<"3 (Lower-Left Diagonal) , 4 (Lower-Right Diagonal) "; std::cin>>dir;
A = temp1;
B = temp2;
AA= temp3;
BB= temp4;


//delay(1000);
if (Board1[9][1] == A){
Board1[9][1] = AA;
}
else if (Board1[9][3] == A){
Board1[9][3] = AA;
}
else if (Board1 [9][5] == A){
Board1[9][5] = AA;
}
else if (Board1[9][7] == A){
Board1[9][7] = AA;
}
else if (Board1[9][9] == A)
{Board1[9][9] = AA;
}
// UL Diagonal
// UL Diagonal
if(dir==1)
{
 if(X==9)
 {
  std::cout<<"Token can't move....";
  //delay(500);
  goto Again;
 }
 if(Board1[Y+1][X+1]==A)
 {
  std::cout<<"Token can't move....";
  //delay(500);
  goto Again;
 }
 if(Board1[Y][X] == A && Board1[Y+1][X+1]==' ')
 {
  Board1[Y][X]=' ';
  Board1[Y+1][X+1]=A;
  goto done2;
 }
 if(Board1[Y][X] == AA && Board1[Y+1][X+1]==' ')
 {
  Board1[Y][X]=' ';
  Board1[Y+1][X+1]=AA;
  goto done2;
 }
 if(Board1[Y+1][X+1]==B)
 {
  if(X>=8)
  {
   std::cout<<"Token can't move....";
   //delay(500);
   goto Again;
  }
  if(Board1[Y+2][X+2]!=' ')
  {
   std::cout<<"Token can't move....";
   //delay(500);
   goto Again;
  }
  else
  {
   Board1[Y][X]=' ';
   Board1[Y+1][X+1] = ' ';
   Y+=2; X+=2;
   Board1[Y][X]=A;
   goto done2;
  }
 }
}


// UR Diagonal
if(dir==2)
{
 if(X==0)
 {
 std::cout<<"Token can't move....";
  ///delay(500);
  goto Again;
 }
 if(Board1[Y+1][X-1]==A)
 {
  std::cout<<"Token can't move....";
  //delay(500);
  goto Again;
 }
 if(Board1[Y+1][X-1]==' ')
 {
  Board1[Y][X]=' ';
  Board1[Y+1][X-1]=A;
  goto done2;
 }
 if(Board1[Y+1][X-1]==B)
 {
  if(X<=1)
  {
   std::cout<<"Token can't move....";
   //delay(500);
   goto Again;
  }
  if(Board1[Y+2][X-2]!=' ')
  {
   std::cout<<"Token can't move....";
   //delay(500);
   goto Again;
  }
  else
  {
   Board1[Y][X]=' ';
   Board1[Y+1][X-1] = ' ';
   Y+=2; X-=2;
   Board1[Y][X]=A;
   goto done2;
  }
 }
}


// DL Diagonal

if(dir==3)
{
 if(X==9 || Y==0)
 {
  std::cout<<"Token can't move....";
  //delay(500);
  goto Again;
 }
 if(Board1[Y-1][X+1]==A || Board1[Y-1][X+1] == B)
 {
  std::cout<<"Token can't move....";
  //delay(500);
  goto Again;
 }
 if(Board1[Y-1][X+1]==' ' && Board1[Y][X] == AA)
 {
  Board1[Y][X]=' ';
  Board1[Y-1][X+1]=AA;
  goto done2;
 }
 if(Board1[Y-1][X+1]==B)
 {
  if(X>=8)
  {
   std::cout<<"Token can't move....";
   //delay(500); 
   goto Again;
  }
  if( Board1[Y-1][X+1] == B && Board1[Y-2][X+2]!=' ')
  {
   std::cout<<"Token can't move....";
   //delay(500);
   goto Again;
  }
  else
  {
   Board1[Y][X]=' ';
   Board1[Y-1][X+1] = ' ';
   Y-=2; X+=2;
   Board1[Y][X]=AA;
   goto done2;
  }
 }
}
 
// DR Diagonal
if(dir==4)
{
 if(Y==0)
 {
  std::cout<<"Token can't move....";
  //delay(500);
  goto Again;
 }
 if(Board1[Y-1][X-1]==A || Board1[Y-1][X-1] == B)
 {
  std::cout<<"Token can't move....";
  //delay(500);
  goto Again;
 }
 if(Board1[Y-1][X-1]==' ' && Board1[Y][X] == AA )
 {
  Board1[Y][X]=' ';
  Board1[Y-1][X-1]=A;
  goto done2;
 }
 if(Board1[Y-1][X-1]==B)
 {
  if(X<=1)
  {
   std::cout<<"Token can't move....";
   //delay(500);
   goto Again;
  }
  if(Board1[Y-1][X-1] == B && Board1[Y-2][X-2]!=' ')
  {
   std::cout<<"Token can't move....";
   //delay(500);
   goto Again;
  }
  else
  {
   Board1[Y][X]=' ';
   Y-=1; X-=1;
   Board1[Y][X]=AA;
   goto done2;
  }
 }
}



done2:
Display1(Board1);
//delay(1000);
time_t taken = time(NULL) - start;
m = taken / 60;
s3 = taken % 60;
std::cout<<"Time taken : "<< m <<':'<<s3<<std::endl;
Player1=0; Player2=0;
A = temp1;
B = temp2;
AA = temp3;
BB = temp4;
std::cout<<Y<<std::endl;
std::cout<<X<<std::endl;
for(i=0;i<10;i++)
{
 for(j=0;j<10;j++)
 {
  if(Board1[i][j]==B || Board1[i][j]==BB)
  Player1++;
 }
}
for(i=0;i<10;i++)
{
 for(j=0;j<10;j++)
 {
  if(Board1[i][j]==A || Board1[i][j]==AA)
  Player2++;
 }
}

if(Player1==0 || Player2==0 || m >= 5)
goto end;
else
goto begin;

end:
//clrscr();



if(Player1>Player2)
{
 //delay(2000);
// gotoxy(30,10);
 std::cout<<"YOU WON THE GAME !!!!!!";
 std::thread t1(fdf);
 t1.join();
}
if(Player1<Player2)
{
 //delay(2000);
// gotoxy(30,10);
 std::cout<<"OPPONENT WON THE GAME !!!!!!";
 std::thread t2(thread_function);
 t2.join();
}
if(Player1==Player2)
{
 //delay(2000);
// gotoxy(30,10);
 std::cout<<"IT IS A DRAW !!!!!!";
 std::cout<<"Main Thread continues, Play Again";
}
//getch();

return 0;
}

